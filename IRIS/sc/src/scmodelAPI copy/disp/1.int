ROUTINE scmodelAPI.disp.1 [Type=INT,Generated]
 ;scmodelAPI.disp.1
 ;Generated for class scmodelAPI.disp.  Do NOT edit. 21/08/2025 12:16:59PM
 ;;4D78324A;scmodelAPI.disp
 ;
AddAttribute(pobjectName) methodimpl {
    Try {
        Set authorized=0
        Do {
            If '$system.Security.Check("SC_Data_Model_API","Write") Quit
            Set authorized=1
        } While 0
        If 'authorized {
            Try {
                Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP403FORBIDDEN,$$Error^%apiOBJ(8730))
            } Catch {
                Do ##class(%REST.Impl).%ReportRESTError(..#HTTP403FORBIDDEN,$$Error^%apiOBJ(8730))
            }
            Quit
        }
        If $case(%request.ContentType,"application/json":0,:1) {
            Try {
                Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP415UNSUPPORTEDMEDIATYPE,$$Error^%apiOBJ(8726,%request.ContentType))
            } Catch {
                Do ##class(%REST.Impl).%ReportRESTError(..#HTTP415UNSUPPORTEDMEDIATYPE,$$Error^%apiOBJ(8726,%request.ContentType))
            }
            Quit
        }
        Do ##class(%REST.Impl).%SetContentType("application/json")
        If '##class(%REST.Impl).%CheckAccepts("application/json") {
            Try {
                Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP406NOTACCEPTABLE,$$Error^%apiOBJ(8757))
            } Catch {
                Do ##class(%REST.Impl).%ReportRESTError(..#HTTP406NOTACCEPTABLE,$$Error^%apiOBJ(8757))
            }
            Quit
        }
        If '$isobject(%request.Content) || (%request.Content.Size=0) Do ##class(%REST.Impl).%ReportRESTError(..#HTTP400BADREQUEST,$$Error^%apiOBJ(8727,"body")) Quit
        Set pbody=##class(%Library.DynamicAbstractObject).%FromJSON(%request.Content)
        Set response=##class(scmodelAPI.impl).AddAttribute(pobjectName,pbody)
        Do ##class(scmodelAPI.impl).%WriteResponse(response)
    } Catch (ex) {
        Try {
            Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP500INTERNALSERVERERROR,ex.AsStatus(),$parameter("scmodelAPI.impl","ExposeServerExceptions"))
        } Catch {
            Do ##class(%REST.Impl).%ReportRESTError(..#HTTP500INTERNALSERVERERROR,ex.AsStatus(),$parameter("scmodelAPI.impl","ExposeServerExceptions"))
        }
    }
    Quit 1 }
CreateCustomObject() methodimpl {
    Try {
        Set authorized=0
        Do {
            If '$system.Security.Check("SC_Data_Model_API","Write") Quit
            Set authorized=1
        } While 0
        If 'authorized {
            Try {
                Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP403FORBIDDEN,$$Error^%apiOBJ(8730))
            } Catch {
                Do ##class(%REST.Impl).%ReportRESTError(..#HTTP403FORBIDDEN,$$Error^%apiOBJ(8730))
            }
            Quit
        }
        If $case(%request.ContentType,"application/json":0,:1) {
            Try {
                Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP415UNSUPPORTEDMEDIATYPE,$$Error^%apiOBJ(8726,%request.ContentType))
            } Catch {
                Do ##class(%REST.Impl).%ReportRESTError(..#HTTP415UNSUPPORTEDMEDIATYPE,$$Error^%apiOBJ(8726,%request.ContentType))
            }
            Quit
        }
        Do ##class(%REST.Impl).%SetContentType("application/json")
        If '##class(%REST.Impl).%CheckAccepts("application/json") {
            Try {
                Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP406NOTACCEPTABLE,$$Error^%apiOBJ(8757))
            } Catch {
                Do ##class(%REST.Impl).%ReportRESTError(..#HTTP406NOTACCEPTABLE,$$Error^%apiOBJ(8757))
            }
            Quit
        }
        If '$isobject(%request.Content) || (%request.Content.Size=0) Do ##class(%REST.Impl).%ReportRESTError(..#HTTP400BADREQUEST,$$Error^%apiOBJ(8727,"body")) Quit
        Set pbody=##class(%Library.DynamicAbstractObject).%FromJSON(%request.Content)
        Set response=##class(scmodelAPI.impl).CreateCustomObject(pbody)
        Do ##class(scmodelAPI.impl).%WriteResponse(response)
    } Catch (ex) {
        Try {
            Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP500INTERNALSERVERERROR,ex.AsStatus(),$parameter("scmodelAPI.impl","ExposeServerExceptions"))
        } Catch {
            Do ##class(%REST.Impl).%ReportRESTError(..#HTTP500INTERNALSERVERERROR,ex.AsStatus(),$parameter("scmodelAPI.impl","ExposeServerExceptions"))
        }
    }
    Quit 1 }
DispatchMap(url,method,verbsMatched="",args) methodimpl {
 Set searchMethod=","_method_","
 Do {
   Set matcher = ##class(%Regex.Matcher).%New("/objects/([^/]+)")
   If matcher.Match(url) {
     If ",GET,OPTIONS," [ searchMethod Set route=$lb("R","GetObjectDefinitionByName",$classname(),"false"),regex=1 Quit
     Set verbsMatched=verbsMatched_",GET,OPTIONS"
   }
   Set matcher.Pattern="/objects"
   If matcher.Match(url) {
     If ",GET,OPTIONS," [ searchMethod Set route=$lb("R","GetObjects",$classname(),"false"),regex=1 Quit
     Set verbsMatched=verbsMatched_",GET,OPTIONS"
   }
   Set matcher.Pattern="/objects"
   If matcher.Match(url) {
     If ",POST,OPTIONS," [ searchMethod Set route=$lb("R","CreateCustomObject",$classname(),"false"),regex=1 Quit
     Set verbsMatched=verbsMatched_",POST,OPTIONS"
   }
   Set matcher.Pattern="/attributes/([^/]+)"
   If matcher.Match(url) {
     If ",POST,OPTIONS," [ searchMethod Set route=$lb("R","AddAttribute",$classname(),"false"),regex=1 Quit
     Set verbsMatched=verbsMatched_",POST,OPTIONS"
   }
   Set matcher.Pattern="/updatecustomapi"
   If matcher.Match(url) {
     If ",POST,OPTIONS," [ searchMethod Set route=$lb("R","UpdateApiJSON",$classname(),"false"),regex=1 Quit
     Set verbsMatched=verbsMatched_",POST,OPTIONS"
   }
   Return ""
 } While 0
 If regex && matcher.GroupCount {
   For i=1:1:matcher.GroupCount Set args($i(args))=matcher.Group(i)
 }
 If $li(route,1)="R" { 
   Return route 
 } Else { 
   Set continue=1
   Set sc=$classmethod($list(route,2),"OnPreDispatch", args(args), method, .continue) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
   If 'continue Return route
   Return $classmethod($list(route,2), "DispatchMap", args($i(args,-1)+1), method, .verbsMatched, .args)
 } }
GetObjectDefinitionByName(pobjectName) methodimpl {
    Try {
        Set authorized=0
        Do {
            If '$system.Security.Check("SC_Data_Model_API","Read") Quit
            Set authorized=1
        } While 0
        If 'authorized {
            Try {
                Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP403FORBIDDEN,$$Error^%apiOBJ(8730))
            } Catch {
                Do ##class(%REST.Impl).%ReportRESTError(..#HTTP403FORBIDDEN,$$Error^%apiOBJ(8730))
            }
            Quit
        }
        Do ##class(%REST.Impl).%SetContentType("application/json")
        If '##class(%REST.Impl).%CheckAccepts("application/json") {
            Try {
                Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP406NOTACCEPTABLE,$$Error^%apiOBJ(8757))
            } Catch {
                Do ##class(%REST.Impl).%ReportRESTError(..#HTTP406NOTACCEPTABLE,$$Error^%apiOBJ(8757))
            }
            Quit
        }
        Set response=##class(scmodelAPI.impl).GetObjectDefinitionByName(pobjectName)
        Do ##class(scmodelAPI.impl).%WriteResponse(response)
    } Catch (ex) {
        Try {
            Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP500INTERNALSERVERERROR,ex.AsStatus(),$parameter("scmodelAPI.impl","ExposeServerExceptions"))
        } Catch {
            Do ##class(%REST.Impl).%ReportRESTError(..#HTTP500INTERNALSERVERERROR,ex.AsStatus(),$parameter("scmodelAPI.impl","ExposeServerExceptions"))
        }
    }
    Quit 1 }
GetObjects() methodimpl {
    Try {
        Set authorized=0
        Do {
            If '$system.Security.Check("SC_Data_Model_API","Read") Quit
            Set authorized=1
        } While 0
        If 'authorized {
            Try {
                Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP403FORBIDDEN,$$Error^%apiOBJ(8730))
            } Catch {
                Do ##class(%REST.Impl).%ReportRESTError(..#HTTP403FORBIDDEN,$$Error^%apiOBJ(8730))
            }
            Quit
        }
        Do ##class(%REST.Impl).%SetContentType("application/json")
        If '##class(%REST.Impl).%CheckAccepts("application/json") {
            Try {
                Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP406NOTACCEPTABLE,$$Error^%apiOBJ(8757))
            } Catch {
                Do ##class(%REST.Impl).%ReportRESTError(..#HTTP406NOTACCEPTABLE,$$Error^%apiOBJ(8757))
            }
            Quit
        }
        Set response=##class(scmodelAPI.impl).GetObjects()
        Do ##class(scmodelAPI.impl).%WriteResponse(response)
    } Catch (ex) {
        Try {
            Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP500INTERNALSERVERERROR,ex.AsStatus(),$parameter("scmodelAPI.impl","ExposeServerExceptions"))
        } Catch {
            Do ##class(%REST.Impl).%ReportRESTError(..#HTTP500INTERNALSERVERERROR,ex.AsStatus(),$parameter("scmodelAPI.impl","ExposeServerExceptions"))
        }
    }
    Quit 1 }
SupportedVerbs(pUrl,pVerbs) methodimpl {
 If '$isobject($get(pVerbs)) Set pVerbs = {}
 Set pMatcher = ##class(%Regex.Matcher).%New("/objects/([^/]+)")
 If pMatcher.Match(pUrl) {
   If 'pVerbs.%IsDefined("GET") Do pVerbs.%Set("GET", 1, "boolean")
   If 'pVerbs.%IsDefined("OPTIONS") Do pVerbs.%Set("OPTIONS", 1, "boolean")
 }
 Set pMatcher.Pattern="/objects"
 If pMatcher.Match(pUrl) {
   If 'pVerbs.%IsDefined("GET") Do pVerbs.%Set("GET", 1, "boolean")
   If 'pVerbs.%IsDefined("OPTIONS") Do pVerbs.%Set("OPTIONS", 1, "boolean")
 }
 Set pMatcher.Pattern="/objects"
 If pMatcher.Match(pUrl) {
   If 'pVerbs.%IsDefined("POST") Do pVerbs.%Set("POST", 1, "boolean")
   If 'pVerbs.%IsDefined("OPTIONS") Do pVerbs.%Set("OPTIONS", 1, "boolean")
 }
 Set pMatcher.Pattern="/attributes/([^/]+)"
 If pMatcher.Match(pUrl) {
   If 'pVerbs.%IsDefined("POST") Do pVerbs.%Set("POST", 1, "boolean")
   If 'pVerbs.%IsDefined("OPTIONS") Do pVerbs.%Set("OPTIONS", 1, "boolean")
 }
 Set pMatcher.Pattern="/updatecustomapi"
 If pMatcher.Match(pUrl) {
   If 'pVerbs.%IsDefined("POST") Do pVerbs.%Set("POST", 1, "boolean")
   If 'pVerbs.%IsDefined("OPTIONS") Do pVerbs.%Set("OPTIONS", 1, "boolean")
 }
 Set it=pVerbs.%GetIterator()
 Set value=""
 While it.%GetNext(.verb) {
   Set value=value_verb_","
 }
 Set pVerbs = $extract(value,1,*-1)
 Return 1 }
UpdateApiJSON() methodimpl {
    Try {
        Set authorized=0
        Do {
            If '$system.Security.Check("SC_Data_Model_API","Write") Quit
            Set authorized=1
        } While 0
        If 'authorized {
            Try {
                Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP403FORBIDDEN,$$Error^%apiOBJ(8730))
            } Catch {
                Do ##class(%REST.Impl).%ReportRESTError(..#HTTP403FORBIDDEN,$$Error^%apiOBJ(8730))
            }
            Quit
        }
        Do ##class(%REST.Impl).%SetContentType("application/json")
        If '##class(%REST.Impl).%CheckAccepts("application/json") {
            Try {
                Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP406NOTACCEPTABLE,$$Error^%apiOBJ(8757))
            } Catch {
                Do ##class(%REST.Impl).%ReportRESTError(..#HTTP406NOTACCEPTABLE,$$Error^%apiOBJ(8757))
            }
            Quit
        }
        Set response=##class(scmodelAPI.impl).UpdateApiJSON()
        Do ##class(scmodelAPI.impl).%WriteResponse(response)
    } Catch (ex) {
        Try {
            Do ##class(scmodelAPI.impl).%ReportRESTError(..#HTTP500INTERNALSERVERERROR,ex.AsStatus(),$parameter("scmodelAPI.impl","ExposeServerExceptions"))
        } Catch {
            Do ##class(%REST.Impl).%ReportRESTError(..#HTTP500INTERNALSERVERERROR,ex.AsStatus(),$parameter("scmodelAPI.impl","ExposeServerExceptions"))
        }
    }
    Quit 1 }