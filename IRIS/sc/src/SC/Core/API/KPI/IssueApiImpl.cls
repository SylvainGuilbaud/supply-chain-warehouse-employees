/*
Copyright (c) 2022 by InterSystems Corporation.
Cambridge, Massachusetts, U.S.A.  All rights reserved.
Confidential property of InterSystems Corporation.
*/

Class SC.Core.API.KPI.IssueApiImpl Extends SC.Core.API.ApiBaseImpl
{

/// Default sorting attribute
Parameter DEFAULTSORTING = "-ID";

ClassMethod UpdateKpiIssues(body As %DynamicObject) As %DynamicAbstractObject
{
    set kpiName = body.kpi
    set kpiDef = ##class(SC.Core.API.KPI.KpiApiImpl).GetKpiDefinitionByName(kpiName)
    if kpiDef = "" { 
        do ..%SetStatusCode("400")
        return {"Status": "Failed", "Message": ("KPI not found ("_kpiName_")") }
    }
    if kpiDef.issueKpi = 0 {
        do ..%SetStatusCode("400")
        return {"Status": "Failed", "Message": ("KPI not configured for issue ("_kpiName_")") }        
    }
    
    set sc = ##class(SC.Core.Util.KpiIssueUtil).updateIssuesForKpi(kpiDef, .totalCount, .newCount, .existCount, .closedCount)
    do ..%SetStatusCode("201")
    return {"kpi":(kpiName), 
            "totalImpactedRecords": (totalCount),
            "newIssue": (newCount), 
            "existIssue": (existCount), 
            "closedIssue": (closedCount)}
}

ClassMethod CloseIssue(issueId As %String, body As %DynamicObject) As %DynamicAbstractObject
{
    try { 
        set issue = ##class(SC.Core.Util.ScObjectUtil).getObjectByUid("Issue", issueId)
        if issue = "" {
		    do ..%SetStatusCode("404")
		    return {"Status": "Failed", 
                    "Message": ("No issue with id ["_issueId_"] was found.")}            
        }
        Set sc = ..checkIssueProcessed(issue.%Id(), .processed)
        if $$$ISERR(sc){
            do ..%SetStatusCode("500")
		    return {"Status": "Error", 
                "Message": ("Failed to close issue for issue with id ["_issueId_"], underlying error: ["_$System.Status.GetErrorText(sc)_"]")}
        }
        if processed {
		    do ..%SetStatusCode("404")
		    return {"Status": "Failed", 
                    "Message": ("Issue with id ["_issueId_"] already closed. No further update allowed.")}             
        }

        if issue.status = issue.#STATUSCLOSED {
		    do ..%SetStatusCode("404")
		    return {"Status": "Failed", 
                    "Message": ("Issue with id ["_issueId_"] already closed. No further update allowed.")}             
        }
        elseif ( (issue.status="") || (issue.status = issue.#STATUSOPEN)) {
            Set comment = body.comment
            do ..closeIssueWithComment(issue, comment)
        }
        elseif issue.status = issue.#STATUSWORKFLOW {
            do ..terminateWorkflow(issue)
            Set comment = body.comment
            do ..closeIssueWithComment(issue, comment)
        }
        do ..%SetStatusCode("200")
		return {"Status": "Success", 
                "Message": ("Successfully closed issue with id ["_issueId_"]. ")}
	} catch (ex) {
		do ..%SetStatusCode("500")
		return {"Status": "Error", 
                "Message": ("Failed to close issue with id ["_issueId_"] due to internal error. ")}
	}
}

/// Terminate a workflow associated with an issue
ClassMethod terminateWorkflow(issue As SC.Data.Issue) As %Status
{
    Set sc = $$$OK
    $$$AddAllRoleTemporary
    set taskId = ##class(SC.Core.Util.IssueUtil).getWorkflowId(issue)
    Set task = ##class(EnsLib.Workflow.TaskResponse).%OpenId(taskId)

    Set sc = ##class(EnsLib.Workflow.Engine).CompleteTask(task)

    set ana = issue.getLatestAnalysis()
    set ana.status = ana.#STATUSTERMINATED
    set ana.resolution = ana.#RESOLUTIONNOACTION
    set sc = ana.%Save()

    Return sc
}

/// close an issue
ClassMethod closeIssueWithComment(issue As SC.Data.Issue, comment As %String) As %Status
{
    Set sc = $$$OK
    Set issue.status = issue.#STATUSCLOSED
    Set issue.resolutionNote = comment
    Set issue.resolutionType = issue.#RESOLUTIONMANUAL
    Set sc = issue.%Save()
    Return sc
}

ClassMethod CompleteWorkflow(issueId As %String, body As %DynamicObject) As %DynamicAbstractObject
{
    //return {"issueId": (issueId)}
    try { 
        set issue = ##class(SC.Core.Util.ScObjectUtil).getObjectByUid("Issue", issueId)
        if issue = "" {
		    do ..%SetStatusCode("404")
		    return {"Status": "Failed", 
                    "Message": ("No issue with id ["_issueId_"] was found.")}            
        }
        if issue.status '= issue.#STATUSWORKFLOW {
		    do ..%SetStatusCode("400")
		    return {"Status": "Failed", 
                    "Message": ("Issue with id ["_issueId_"] is not in workflow status.")}             
        }
        
        Set sc = ..checkIssueProcessed(issue.%Id(), .processed)
        if $$$ISERR(sc){
            do ..%SetStatusCode("500")
		    return {"Status": "Error", 
                "Message": ("Failed to complete issue with id ["_issueId_"], underlying error: ["_$System.Status.GetErrorText(sc)_"]")}
        }
        if processed {
		    do ..%SetStatusCode("404")
		    return {"Status": "Failed", 
                    "Message": ("Issue with id ["_issueId_"] already closed. No further update allowed.")}             
        }

        set optionNumber = body.selectedOption
        set option = issue.getScenarioFromLastAnalysis(optionNumber)
        if option = "" {
		    do ..%SetStatusCode("404")
		    return {"Status": "Failed", 
                    "Message": ("Issue with id ["_issueId_"] does not have option "_optionNumber_" in its latest analysis.")}             
        }
        set sc = ##class(SC.Core.Util.IssueUtil).completeIssueWorkflow(issue, optionNumber)

        set ana = issue.getLatestAnalysis()
        set ana.status = ana.#STATUSCOMPLETED
        set ana.resolution = ana.#RESOLUTIONWORKFLOW
        set ana.actionTaken = optionNumber
        set anaSc = ana.%Save()

        set issue.status = issue.#STATUSCLOSED
        set issue.resolutionType = issue.#RESOLUTIONBPL
        set issue.resolutionNote = body.comment
        set issueSc = issue.%Save()

        if $$$ISOK(anaSc) && $$$ISOK(issueSc) {
            do ..%SetStatusCode("200")
		    return {"Status": "Success", 
                "Message": ("Successfully closed the issue with id ["_issueId_"] with workflow option "_optionNumber_".")}
        }
        else {
		    do ..%SetStatusCode("500")
		    return {"Status": "Error", 
                "Message": ("Failed to close the issue with id ["_issueId_"] with workflow option "_optionNumber_".")}
        }

	} catch (ex) {
		do ..%SetStatusCode("500")
		return {"Status": "Error", 
                "Message": ("Failed to run analysis for issue with id ["_issueId_"] due to internal error ")}
	}
}

ClassMethod RunIssueAnalysis(issueId As %Integer, body As %DynamicObject) As %DynamicAbstractObject
{
    try { 
        set issue = ##class(SC.Core.Util.ScObjectUtil).getObjectByUid("Issue", issueId)
        //set issue = ##class(SC.Core.Data.Internal.Issue).%OpenId(issueId)
        if issue = "" {
		    do ..%SetStatusCode("404")
		    return {"Status": "Failed", 
                    "Message": ("No issue with id ["_issueId_"] was found.")}            
        }
        if issue.status = issue.#STATUSCLOSED {
		    do ..%SetStatusCode("404")
		    return {"Status": "Failed", 
                    "Message": ("Issue with id ["_issueId_"] already closed. No further anaysis allowed.")}             
        }

        Set processName = ..getProcessName(issue, body)
        if processName = "" {
		    do ..%SetStatusCode("404")
		    return {"Status": "Failed", 
                    "Message": ("There is no business process defined in issue with id ["_issueId_"], or provided in the API request.")}    
        }
        Set sc = ..checkIssueProcessed(issueId, .processed)
        if $$$ISERR(sc){
            do ..%SetStatusCode("500")
		    return {"Status": "Error", 
                "Message": ("Failed to run analysis for issue with id ["_issueId_"], using business process ["_processName_"], underlying error: ["_$System.Status.GetErrorText(sc)_"]")}
        }
        if processed {
		    do ..%SetStatusCode("404")
		    return {"Status": "Failed", 
                    "Message": ("Issue with id ["_issueId_"] already closed. No further anaysis allowed.")}             
        }

        set sc = ##class(SC.Core.Util.IssueUtil).runIssueAnalysis(issueId, processName)

        if $$$ISOK(sc) {
            do ..%SetStatusCode("200")
		    return {"Status": "Success", 
                "Message": ("Successfully ran analysis for issue with id ["_issueId_"], using business process ["_processName_"].")}
        }
        else {
		    do ..%SetStatusCode("500")
		    return {"Status": "Error", 
                "Message": ("Failed to run analysis for issue with id ["_issueId_"], using business process ["_processName_"], underlying error: ["_$System.Status.GetErrorText(sc)_"]")}
        }

	} catch (ex) {
		do ..%SetStatusCode("500")
		return {"Status": "Error", 
                "Message": ("Failed to run analysis for issue with id ["_issueId_"] due to internal error ")}
	}
}

/// Find the process name to use for analysis. If one of provided in the request, use that.
/// Otherwise, use the value from Issue object.
ClassMethod getProcessName(issue As SC.Data.Issue, body As %DynamicObject)
{
    set ret = ""
    if body '= "" {
        set ret = body.processName
    }
    if ret = "" {
        set ret = issue.processName
    }
    return ret
}

ClassMethod checkIssueProcessed(issueId As %String, Output processed) As %Status
{
    set sc = $$$OK
    $$$AddAllRoleTemporary
    set processed = 0
    set myquery = "select IssueAnalysis.ID as analysisId, IssueAnalysis.workflowId, IssueAnalysis.status, IssueAnalysis.issueId as issueId, TaskResponse.%action as action, TaskResponse.Id FROM SC_Core_Data_Internal.IssueAnalysis as IssueAnalysis inner join EnsLib_Workflow.TaskResponse as TaskResponse on IssueAnalysis.workflowId = TaskResponse.id WHERE not TaskResponse.%action is Null and IssueAnalysis.status = 'workflow' and issueId = ?"

    set tStatement = ##class(%SQL.Statement).%New()
    set qStatus = tStatement.%Prepare(myquery)
    if $$$ISERR(qStatus) {
        return qStatus
    }
    set rset = tStatement.%Execute(issueId)
    if rset.%SQLCODE < 0 {
        return $$$ERROR($$$SQLCode,rset.SQLCODE,rset.%Message)
    }
    while rset.%Next(){
        set processed = 1
        set issueId = rset.%Get("issueId")
        set analysisId = rset.%Get("analysisId")
        set action = rset.%Get("action")

        set issue = ##class(SC.Data.Issue).%OpenId(issueId)
        set analysis = ##class(SC.Core.Data.Internal.IssueAnalysis).%OpenId(analysisId)

        if action = "Cancelled" {
            set analysis.resolution = analysis.#RESOLUTIONNOACTION
            set analysis.status = analysis.#STATUSTERMINATED
            do analysis.%Save()
        }
        else{
            set issue.resolutionNote = "Issue closed through workflow ui with option "_action
            set issue.resolutionType = issue.#RESOLUTIONBPL
            set issue.status = issue.#STATUSCLOSED
            do issue.%Save()

            set analysis.resolution = analysis.#RESOLUTIONWORKFLOW
            set analysis.status = analysis.#STATUSCOMPLETED
            set analysis.actionTaken = action
            do analysis.%Save()
        }

    }
    return sc
}

}
